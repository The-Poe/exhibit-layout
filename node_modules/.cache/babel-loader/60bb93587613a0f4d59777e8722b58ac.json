{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dover\\\\exhibit-layout\\\\src\\\\features\\\\countdowntimer\\\\Countdowntimer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Countdowntimer(props) {\n  _s();\n\n  const history = useHistory();\n  const {\n    secs\n  } = props; // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n\n  const Ref = useRef(null); // The state for our timer\n\n  const [timer, setTimer] = useState(secs);\n\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    return {\n      total,\n      seconds\n    };\n  };\n\n  const startTimer = e => {\n    let {\n      total,\n      seconds\n    } = getTimeRemaining(e);\n    console.log(\"startTimer total:\", total);\n\n    if (total > 0) {\n      // update the timer\n      // check if less than 10 then we need to\n      // add '0' at the begining of the variable\n      setTimer(seconds);\n    } else if (total <= 0) {\n      /*redirect*/\n      history.push(\"/\");\n      clearTimer();\n    }\n  };\n\n  const clearTimer = e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next\n    setTimer(secs); // If you try to remove this line the\n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n\n    if (Ref.current) clearInterval(Ref.current);\n\n    if (!!e) {\n      const id = setInterval(() => {\n        startTimer(e);\n      }, 250);\n      Ref.current = id;\n    }\n  };\n\n  const getDeadTime = () => {\n    let deadline = new Date(); // This is where you need to adjust if\n    // you entend to add more time\n\n    deadline.setSeconds(deadline.getSeconds() + secs);\n    return deadline;\n  }; // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n  // We put empty array to act as componentDid\n  // mount only\n\n\n  useEffect(() => {\n    let isTimerZero = false;\n\n    if (isTimerZero === false) {\n      clearTimer(getDeadTime());\n    } //useEffect cancel up\n\n\n    return () => {\n      isTimerZero = true;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: timer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Countdowntimer, \"P+mTUhcoFCAVo+fvErVnd4t0Ggk=\", false, function () {\n  return [useHistory];\n});\n\n_c = Countdowntimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdowntimer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useHistory","Countdowntimer","props","history","secs","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","startTimer","console","log","push","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setSeconds","getSeconds","isTimerZero"],"sources":["C:/Users/Dover/exhibit-layout/src/features/countdowntimer/Countdowntimer.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Countdowntimer(props) {\n  const history = useHistory();\n  const { secs } = props;\n\n  // We need ref in this, because we are dealing\n  // with JS setInterval to keep track of it and\n  // stop it when needed\n  const Ref = useRef(null);\n  // The state for our timer\n  const [timer, setTimer] = useState(secs);\n\n  const getTimeRemaining = (e) => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor((total / 1000) % 60);\n    return {\n      total,\n      seconds,\n    };\n  };\n\n  const startTimer = (e) => {\n    let { total, seconds } = getTimeRemaining(e);\n    console.log(\"startTimer total:\", total);\n    if (total > 0) {\n      // update the timer\n      // check if less than 10 then we need to\n      // add '0' at the begining of the variable\n      setTimer(seconds);\n    } else if (total <= 0) {\n      /*redirect*/\n      history.push(\"/\");\n      clearTimer();\n    }\n  };\n\n  const clearTimer = (e) => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next\n    setTimer(secs);\n\n    // If you try to remove this line the\n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n    if (Ref.current) clearInterval(Ref.current);\n\n    if (!!e) {\n      const id = setInterval(() => {\n        startTimer(e);\n      }, 250);\n      Ref.current = id;\n    }\n  };\n\n  const getDeadTime = () => {\n    let deadline = new Date();\n\n    // This is where you need to adjust if\n    // you entend to add more time\n    deadline.setSeconds(deadline.getSeconds() + secs);\n    return deadline;\n  };\n\n  // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n\n  // We put empty array to act as componentDid\n  // mount only\n  useEffect(() => {\n    let isTimerZero = false;\n    if (isTimerZero === false) {\n      clearTimer(getDeadTime());\n    }\n    //useEffect cancel up\n    return () => {\n      isTimerZero = true;\n    };\n  }, []);\n\n  return <span>{timer}</span>;\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;EAAA;;EAC5C,MAAMC,OAAO,GAAGH,UAAU,EAA1B;EACA,MAAM;IAAEI;EAAF,IAAWF,KAAjB,CAF4C,CAI5C;EACA;EACA;;EACA,MAAMG,GAAG,GAAGR,MAAM,CAAC,IAAD,CAAlB,CAP4C,CAQ5C;;EACA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAACM,IAAD,CAAlC;;EAEA,MAAMI,gBAAgB,GAAIC,CAAD,IAAO;IAC9B,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAX,IAAgBE,IAAI,CAACC,KAAL,CAAW,IAAID,IAAJ,EAAX,CAA9B;IACA,MAAME,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYL,KAAK,GAAG,IAAT,GAAiB,EAA5B,CAAhB;IACA,OAAO;MACLA,KADK;MAELG;IAFK,CAAP;EAID,CAPD;;EASA,MAAMG,UAAU,GAAIP,CAAD,IAAO;IACxB,IAAI;MAAEC,KAAF;MAASG;IAAT,IAAqBL,gBAAgB,CAACC,CAAD,CAAzC;IACAQ,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCR,KAAjC;;IACA,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACb;MACA;MACA;MACAH,QAAQ,CAACM,OAAD,CAAR;IACD,CALD,MAKO,IAAIH,KAAK,IAAI,CAAb,EAAgB;MACrB;MACAP,OAAO,CAACgB,IAAR,CAAa,GAAb;MACAC,UAAU;IACX;EACF,CAbD;;EAeA,MAAMA,UAAU,GAAIX,CAAD,IAAO;IACxB;IACA;IACA;IACAF,QAAQ,CAACH,IAAD,CAAR,CAJwB,CAMxB;IACA;IACA;;IACA,IAAIC,GAAG,CAACgB,OAAR,EAAiBC,aAAa,CAACjB,GAAG,CAACgB,OAAL,CAAb;;IAEjB,IAAI,CAAC,CAACZ,CAAN,EAAS;MACP,MAAMc,EAAE,GAAGC,WAAW,CAAC,MAAM;QAC3BR,UAAU,CAACP,CAAD,CAAV;MACD,CAFqB,EAEnB,GAFmB,CAAtB;MAGAJ,GAAG,CAACgB,OAAJ,GAAcE,EAAd;IACD;EACF,CAjBD;;EAmBA,MAAME,WAAW,GAAG,MAAM;IACxB,IAAIC,QAAQ,GAAG,IAAIf,IAAJ,EAAf,CADwB,CAGxB;IACA;;IACAe,QAAQ,CAACC,UAAT,CAAoBD,QAAQ,CAACE,UAAT,KAAwBxB,IAA5C;IACA,OAAOsB,QAAP;EACD,CAPD,CAtD4C,CA+D5C;EACA;EAEA;EACA;;;EACA3B,SAAS,CAAC,MAAM;IACd,IAAI8B,WAAW,GAAG,KAAlB;;IACA,IAAIA,WAAW,KAAK,KAApB,EAA2B;MACzBT,UAAU,CAACK,WAAW,EAAZ,CAAV;IACD,CAJa,CAKd;;;IACA,OAAO,MAAM;MACXI,WAAW,GAAG,IAAd;IACD,CAFD;EAGD,CATQ,EASN,EATM,CAAT;EAWA,oBAAO;IAAA,UAAOvB;EAAP;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;GAhFuBL,c;UACND,U;;;KADMC,c"},"metadata":{},"sourceType":"module"}